@model UserViewModel

@using AzadiSoft.UserManager.Framework
@using AzadiSoft.UserManager.Resources;
@using AzadiSoft.UserManager.ViewModels

@{

    var pageTitle = MessageText.UserList;

    ViewBag.Title = pageTitle;

    var gridName = "User_Grid";

    var userIdKey = "#=" + Html.FieldNameFor(x => x.User_ID) + "#";
}

<script type="text/javascript">

    function viewUser(id) {

        var url = '@Url.Action("View")';

        var postData = {

            id: id
        }

        var modalTitle = '@MessageText.ViewUserDetails';

        ajaxCall(url,

            function(result) {

                showModal(modalTitle, result);
            },

            'post',
            
            postData,

            function (result, statusText, error) {

                console.error(result.responseText);

            });
    }

    function activateUser(id, active) {

        var url = '@Url.Action("ActivateUser")';

        var postData = {

            id: id, 

            active: active
        }

        ajaxCall(url,

            function (result) {

                var str = JSON.stringify(result);

                var msg = 'کاربر ' + result.UserName + (result.active ? ' فعال ' : ' غیرفعال ') + 'شد.';

                alert(msg);
            },

            'post',
            
            postData,

            function (result) {

                console.error(result.responseText);

            });
    }

    function ajaxEditUser(id) {

        var url = '@Url.Action("EditAjax")';

        var postData = {

            id: id
        }

        ajaxCall(url, function(result) {

            showModal('@MessageText.EditUserDetails', result);

        }, 'post', postData, function(result) {

            console.error(result.responseText);

        });

    }

    function getGrid() {

        return $('#@gridName');
    }

    function reloadGrid() {

        var kendoGrid = getGrid().data('kendoGrid');

        kendoGrid.dataSource.read();
    }

</script>

<h2>@pageTitle</h2>

@helper EditButton()
{    
    <a role="button" href="@Url.Action("Edit")/#=User_ID#" class="btn btn-success">@MessageText.Edit</a>
}

@helper DeleteButton()
{
    <a role="button" href="@Url.Action("Delete")/#=User_ID#" onclick="return confirm('@MessageText.AreYouSureToDeleteThisUser')" class="btn btn-danger">@MessageText.Delete</a>
}


@helper ViewButton()
{
    <button type="button" class="btn btn-primary" onclick="viewUser(#=User_ID#)">@MessageText.View</button>
}

@helper ActiveButton()
{
    var checkBoxID = "chkActive_#=User_ID#";

    <label for="@checkBoxID">@MessageText.Active</label>

    <input type="checkbox" id="@checkBoxID" data-id="#=User_ID#" data-checked="#=IsActive#" #= IsActive ? checked="checked" : null  # onchange="activateUser(#=User_ID#, $(this).prop('checked'));" />
}

@helper AjaxEditButton()
{
    <button id="btnEdit_#=User_ID#" type="button" class="btn btn-warning" data-id="#=User_ID#" onclick="ajaxEditUser(#=User_ID#)">Ajax Edit</button>
}

@(Html.Kendo().Grid<UserViewModel>()
      
      .Name(gridName)
      
          .Columns(columns =>
          {
              columns.Bound(x => x.User_ID).Title("ID").Width(150);

              columns.Bound(x => x.UserName);

              columns.Bound(x => x.Email);

              columns.Bound(x => x.FirstName);

              columns.Bound(x => x.LastName);

              columns.Bound(x => x.MobileNumber);

              columns.Bound(x => x.CompanyName);

              var buttonWidth = 100;

              columns.Template(x => { }).ClientTemplate(ActiveButton().ToHtmlString()).Title(MessageText.Active).Width(buttonWidth);

              columns.Template(x => { }).ClientTemplate(ViewButton().ToHtmlString()).Title(MessageText.View).Width(buttonWidth);

              columns.Template(x => { }).ClientTemplate(AjaxEditButton().ToHtmlString()).Title("Ajax Edit").Width(buttonWidth);


              columns.Template(x => { }).ClientTemplate(EditButton().ToHtmlString()).Title(MessageText.Edit).Width(buttonWidth);

              columns.Template(x => { }).ClientTemplate(DeleteButton().ToHtmlString()).Title(MessageText.Delete).Width(buttonWidth);

          })      

          .Sortable()

          .Filterable(filter => filter.Mode(GridFilterMode.Row))

          .Scrollable(x => x.Height(600))

          .Pageable(p => p.Refresh(true).PreviousNext(true))

          .DataSource(x => x.Ajax().Read(read => read.Action("Grid_Read", "User"))

              .Model(model => model.Id(id => id.User_ID)).PageSize(25))

          .Mobile()

          .Selectable(s => s.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))

      .ToolBar(toolbar => toolbar.Custom().Action("Create","User").Text(MessageText.CreateNewUser))

)